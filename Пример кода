/* Контрольная работа №1.
* 
*  Задание 1.
*  Написать класс комплексного числа.
*  Иметь: конструктор с параметрами, ввод, вывод, модуль, операторы +, -, ==.
* 
*  Задание 2. 
*  Дан класс студент.
*  Написать наследника бакалавр. Иметь в нём закрытые поля год выпуска, средний балл и тема диплома. Иметь методы оступа к закрытым полям. Иметь конструктор с параметрами. Переопределить вывод.
*  Написать наследник призывник. Иметь в нём закрытые поля год призыва, рост, размер обуви. Иметь методы доступа к закрытым полям. Иметь конструктор с параметрами. Переопределить вывод.
*  Написать функцию вне класса сравнения студентов по курсу. Выдаёт true, если первый студент на курсе старше.
*  Завести массив студентов. Вывести полную информацию о студенте с самого младшего курса.
*/

#include <iostream>
#include <random>
#include <string>

using namespace std;

class complex_number {
protected:
	double a, b;
public:
	// Конструкторы:
	complex_number() : a(0), b(0) {}
	complex_number(double real, double imagine = 0) : a(real), b(imagine) {}

	// Методы:
	double abs() const { return sqrt(a * a + b * b); }

	// Перегрузка операторов:
	bool operator==(complex_number& other) { return (a == other.a && b == other.b) ? true : false; }
	complex_number& operator+(const complex_number& other) { complex_number c(a + other.a, b + other.b); return c; }
	complex_number& operator-(const complex_number& other) { complex_number c(a - other.a, b - other.b); return c; }
	complex_number& operator=(complex_number& other) { a = other.a; b = other.b; return other; }

	// friend функции:
	friend istream& operator>>(istream& is, complex_number& c) { is >> c.a >> c.b; return is; }
	friend ostream& operator<<(ostream& os, const complex_number& c) { os << c.a; if (c.b > 0) os << "+" << c.b << "i"; else if (c.b < 0) os << "-" << c.b << "i"; return os; }
};

class student {
protected:
	string name;
	int course, group;
public:
	// Конструкторы:
	student() : name(""), course(0), group(0) {}
	student(string n, int c, int g) : name(n), course(c), group(g) {}

	// Геттеры:
	string get_name() const { return name; }
	int get_course() const { return course; }
	int get_group() const { return group; }

	// Методы:
	void print(ostream& os = cout) const { os << name << " " << course << "." << group << endl; }
};

class bachelor : public student {
private:
	int gr_y;
	double av_p;
	string gr_w_th;
public:
	// Конструкторы:
	bachelor() : student(), gr_y(0), av_p(0), gr_w_th("") {}
	bachelor(string n, int y, string theme, double p) : student(), gr_y(y), av_p(p), gr_w_th(theme) { name = n; }

	// Геттеры:
	int get_gr_y() { return gr_y; }
	double get_av_p() { return av_p; }
	string get_gr_w_th() { return gr_w_th; }

	// Сеттеры:
	void set_gr_y(int y) { gr_y = y; }
	void set(double p) { av_p = p; }
	void set(string theme) { gr_w_th = theme; }

	// Методы:
	void print(ostream& os = cout) const { os << name << " " << gr_y << " " << av_p << " " << gr_w_th << endl; }
};

class recruit : public student {
private:
	int year, growth, boot_size;
public:
	// Конструкторы:
	recruit() : student(), year(0), growth(0), boot_size(0) {}
	recruit(string n, int y, int gr, int bs) : student(), year(y), growth(gr), boot_size(bs) { name = n; }

	// Геттеры:
	int get_year() { return year; }
	int get_growth() { return growth; }
	int get_boot_size() { return boot_size; }

	// Сеттеры:
	void set_year(int y) { year = y; }
	void set(int gr) { growth = gr; }
	void set(int bs) { boot_size = bs; }

	// Методы:
	void print(ostream& os = cout) const { os << name << " " << year << " " << growth << " " << boot_size << endl; }
};

bool higher_course(student& a, student& b) { return (a.get_course() > b.get_course()) ? true : false; }

int main() {
	// Task 1.
	complex_number c1, c2(3, 1);
	cout << c1 << endl << c2 << endl;;

	cin >> c2;
	cout << c2 << endl;

	cout << c2.abs() << endl;

	cin >> c1 >> c2;
	cout << c1 + c2 << endl << c1 - c2 << endl << (c1 == c2) << endl;

	c1 = c2;
	cout << c1;

	// Task 2.
	int n = 5;
	default_random_engine generator;
	uniform_int_distribution<int> course_dist(1, 5);
	uniform_int_distribution<int> group_dist(1, 12);
	student* students = new student[n];

	for (int i = 0; i < n; ++i)
		students[i] = student(string("Student i"), course_dist(generator), group_dist(generator));

	int id = 0;
	for (int i = 1; i < n; ++i)
		if (higher_course(students[id], students[i]))
			id = i;

	students[id].print();
}
