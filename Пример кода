//Решение задачки с https://informatics.mccme.ru/mod/statements/view3.php?id=21067&chapterid=3314#1

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
 
vector <int> a, tree;
 
 // Функция нахождения НОДа с помощью улучшенного алгоритма Евклида. 
 
int GCD(int f, int s)
{
    if (s == 0)
        return f;
    while ((f != 0) && (s != 0))
    {
        if (f < s) swap(f, s);
        f = f % s;
 
    }
    return s;
}

// Строим простенькое дерево отрезков, в вершинах которого хранится НОД правого и левого потомка. 

void plant_a_tree(int v, int tl, int tr)
{
    if (tl == tr)
        tree[v] = a[tl];
    else
    {
        int tm = (tl + tr) / 2;
        plant_a_tree(2 * v, tl, tm);
        plant_a_tree(2 * v + 1, tm + 1, tr);
        tree[v] = GCD(tree[2 * v], tree[2 * v + 1]);
    }
}
 
// Обычный спуск по дереву отрезков и поиск НОДа отрезка.
 
int search_of_GCD(int v, int tl, int tr, int l, int r)
{
    if (l > r)
        return 0;
    if (tl == l && tr == r)
        return tree[v];
    int tm = (tl + tr) / 2;
    return GCD(search_of_GCD(2 * v, tl, tm, l, min(tm, r)), search_of_GCD(2 * v + 1, tm + 1, tr, max(l, tm + 1), r));
}
 
int main()
{
    int n;
    cin >> n;
    a.resize(n);
    tree.resize(4 * n);
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    plant_a_tree(1, 0, n - 1);
    int k; cin >> k;
    for (int i = 0; i < k; ++i)
    {
        int l, r;
        cin >> l >> r;
        cout << search_of_GCD(1, 0 , n - 1, l - 1, r - 1) << " ";
    }
    return 0;
}
